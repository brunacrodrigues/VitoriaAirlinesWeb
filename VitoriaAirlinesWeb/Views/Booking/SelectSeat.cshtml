@model VitoriaAirlinesWeb.Models.ViewModels.Booking.SelectSeatViewModel
@using VitoriaAirlinesWeb.Data.Enums

@{
    ViewData["Title"] = "Select Your Fare & Seat";
    var allLetters = new[] { "A", "B", "C", "D", "E", "F" };
}

@{
    bool isSeatChange = Model.TicketId.HasValue;
    string formAction = isSeatChange ? "ConfirmSeatChange" : "ConfirmBooking";
    string formMethod = isSeatChange ? "get" : "post";
}

<div class="container my-5">
    <div class="text-center mb-5">
        <h2 class="display-5">@ViewData["Title"]</h2>
        <p class="lead text-muted d-flex justify-content-center align-items-center gap-2 flex-wrap">
            For flight
            <img src="@Model.OriginAirport.Country.FlagImageUrl" style="width: 24px;" />
            <span>(@Model.OriginAirport.IATA) @Model.OriginAirport.Name</span>
            →
            <img src="@Model.DestinationAirport.Country.FlagImageUrl" style="width: 24px;" />
            <span>(@Model.DestinationAirport.IATA) @Model.DestinationAirport.Name</span>
            on @Model.FlightInfo.Split("on")[1]
        </p>
    </div>

    <div class="row justify-content-center mb-5">
        <h3 class="text-center mb-4 fw-light">First, choose your fare</h3>

        <div class="col-md-4">
            <div class="fare-card card-economy selectable-card text-center py-4 px-3" data-class-filter="Economy">
                <div class="fare-card-header mb-2">
                    <i class="fas fa-couch fa-2x"></i>
                    <h4 class="mt-2 mb-1">Economy Class</h4>
                    <p class="price">From <strong>@Model.EconomyPrice.ToString("C2")</strong></p>
                </div>
                <span class="btn btn-economy mt-2">Select This Fare</span>
            </div>
        </div>

        <div class="col-md-4">
            <div class="fare-card card-executive selectable-card text-center py-4 px-3" data-class-filter="Executive">
                <div class="fare-card-header mb-2">
                    <i class="fas fa-crown fa-2x"></i>
                    <h4 class="mt-2 mb-1">Executive Class</h4>
                    <p class="price">From <strong>@Model.ExecutivePrice.ToString("C2")</strong></p>
                </div>
                <span class="btn btn-executive mt-2">Select This Fare</span>
            </div>
        </div>
    </div>

    <form asp-action="@formAction" asp-controller="Booking" method="@formMethod" id="confirmSeatForm">
        @if (!isSeatChange)
        {
            <input type="hidden" name="flightId" value="@Model.FlightId" />
            <input type="hidden" name="seatId" id="selectedSeatId" />
        }
        else
        {
            <input type="hidden" name="oldTicketId" value="@Model.TicketId" />
            <input type="hidden" name="newSeatId" id="selectedSeatId" />
        }

        <div id="plane-section" class="plane-container container" style="display: none;">
            <div class="row justify-content-center">
                <div class="col-12 col-lg-7 mb-4">
                    <h3 id="plane-section-title" class="text-center mb-4 fw-light"></h3>

                    <div class="legend-container mb-4">
                        <div class="legend-item"><div class="seat-sample executive"></div> Executive Class</div>
                        <div class="legend-item"><div class="seat-sample economy"></div> Economy Class</div>
                        <div class="legend-item"><div class="seat-sample occupied"></div> Occupied</div>
                    </div>

                    <div class="plane">
                        <div class="cockpit">Cockpit</div>

                        @foreach (var rowGroup in Model.Seats.OrderBy(s => s.Row).GroupBy(s => s.Row))
                        {
                            var seats = rowGroup.ToList();

                            <div class="seat-row" data-row-class="@seats.First().Class.ToString()">
                                <div class="row-label">@rowGroup.Key</div>

                                @foreach (var letter in allLetters)
                                {
                                    if (letter == "D")
                                    {
                                        <div class="aisle"></div>
                                    }

                                    var seat = seats.FirstOrDefault(s => s.Letter == letter);
                                    if (seat != null)
                                    {
                                        bool isOccupied = Model.OccupiedSeatsIds.Contains(seat.Id);
                                        string seatStateClass = isOccupied ? "occupied" : "available";
                                        string seatTypeClass = seat.Class == SeatClass.Executive ? "executive" : "economy";

                                        <a href="#"
                                           class="booking-seat @seatStateClass @seatTypeClass"
                                           data-seat-id="@seat.Id"
                                           data-seat-class="@seat.Class.ToString()"
                                           title="@(isOccupied ? "Occupied" : $"Row {seat.Row}, Seat {seat.Letter} ({seat.Class})")"
                                           @(isOccupied ? "tabindex=\"-1\" aria-disabled=\"true\"" : "")>
                                            @seat.Letter
                                        </a>
                                    }
                                    else
                                    {
                                        <div style="width: 40px;"></div>
                                    }
                                }
                            </div>
                        }
                    </div>
                </div>

                <div id="confirm-seat-container" class="col-12 col-lg-4 d-flex flex-column align-items-center justify-content-start" style="display: none;">
                    <h4>Selected Seat</h4>
                    <div id="selected-seat-info" class="mb-3 fw-semibold" style="font-size: 1.2rem;">None</div>
                    <button type="submit" id="confirm-selection-btn" class="btn btn-gold" disabled>Confirm Seat Selection</button>
                    @Html.AntiForgeryToken()
                </div>
            </div>
        </div>
    </form>
</div>

@section Scripts {
<script>
    document.addEventListener('DOMContentLoaded', function () {
        const fareCards = document.querySelectorAll('.fare-card');
        const planeSection = document.getElementById('plane-section');
        const planeSectionTitle = document.getElementById('plane-section-title');
        const allSeatRows = document.querySelectorAll('.seat-row');
        const confirmContainer = document.getElementById('confirm-seat-container');
        const selectedSeatInfo = document.getElementById('selected-seat-info');
        const confirmButton = document.getElementById('confirm-selection-btn');
        const selectedSeatInput = document.getElementById('selectedSeatId');

        fareCards.forEach(card => {
            card.addEventListener('click', function () {
                fareCards.forEach(c => c.classList.remove('selected', 'border-primary', 'border-warning', 'border-3'));
                this.classList.add('selected');
                const isExecutive = this.getAttribute('data-class-filter') === 'Executive';
                this.classList.add(isExecutive ? 'border-warning' : 'border-primary', 'border-3');

                const selectedClass = this.getAttribute('data-class-filter');
                planeSectionTitle.textContent = `Now, please select your ${selectedClass} seat`;

                allSeatRows.forEach(row => {
                    const rowClass = row.getAttribute('data-row-class');
                    row.style.display = rowClass === selectedClass ? 'grid' : 'none';
                });

                planeSection.style.display = 'block';
                planeSection.scrollIntoView({ behavior: 'smooth', block: 'center' });

                clearSelection();
            });
        });

        let selectedSeat = null;

        function clearSelection() {
            if (selectedSeat) {
                selectedSeat.classList.remove('selected-seat');
                selectedSeat = null;
            }
            selectedSeatInfo.textContent = 'None';
            selectedSeatInput.value = '';
            confirmButton.disabled = true;
            confirmButton.classList.add('disabled');
            confirmContainer.style.display = 'none';
        }

        const seatLinks = document.querySelectorAll('.booking-seat.available');

        seatLinks.forEach(seat => {
            seat.addEventListener('click', function (e) {
                e.preventDefault();

                if (selectedSeat) {
                    selectedSeat.classList.remove('selected-seat');
                }

                this.classList.add('selected-seat');
                selectedSeat = this;

                selectedSeatInfo.textContent = this.title;
                selectedSeatInput.value = this.getAttribute('data-seat-id');

                confirmButton.disabled = false;
                confirmButton.classList.remove('disabled');
                confirmContainer.style.display = 'flex';
            });
        });
    });
</script>
}