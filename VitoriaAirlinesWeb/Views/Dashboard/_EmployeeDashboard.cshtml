@model VitoriaAirlinesWeb.Models.ViewModels.Dashboard.EmployeeDashboardViewModel
@using VitoriaAirlinesWeb.Helpers

<div class="dashboard-container">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2 class="section-title">Employee Dashboard</h2>
            <p class="text-muted">Welcome, @User.Identity.Name</p>
        </div>
        <div class="d-flex justify-content-end gap-2 mb-4">
            <a asp-controller="Flights" asp-action="Create" class="btn btn-sm btn-brand-primary">
                <i class="fas fa-plus-circle me-1"></i> Schedule New Flight
            </a>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-md-3">
            <div class="dashboard-summary-card">
                <h5>Scheduled Flights</h5>
                <h2 class="dashboard-text-maroon">@Model.TotalScheduledFlights</h2>
                <span>Upcoming</span>
            </div>
        </div>
        <div class="col-md-3">
            <div class="dashboard-summary-card">
                <h5>Completed Flights</h5>
                <h2 class="dashboard-text-success">@Model.TotalCompletedFlights</h2>
                <span>Finished</span>
            </div>
        </div>
        <div class="col-md-3">
            <div class="dashboard-summary-card">
                <h5>Tickets Sold</h5>
                <h2 class="dashboard-text-gold">@Model.TotalTicketsSold</h2>
                <span>Last 7 Days</span>
            </div>
        </div>
        <div class="col-md-3">
            <div class="dashboard-summary-card">
                <h5>Average Occupancy</h5>
                <h2 class="dashboard-text-warning">@Model.AverageOccupancy.ToString("0.0")%</h2>
                <span>Across All Flights</span>
            </div>
        </div>
    </div>

    <div class="mt-4">
        <h5 class="mb-3">Live Scheduled Flights</h5>

        <div class="table-responsive">
            <table class="table dashboard-table-custom table-sm align-middle" id="flightTable">
                <thead>
                    <tr>
                        <th>Flight</th>
                        <th>From</th>
                        <th>To</th>
                        <th>Departure</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody>
                    @if (!Model.ScheduledFlights.Any())
                    {
                        <tr>
                            <td colspan="5" class="text-center text-muted">No scheduled flights.</td>
                        </tr>
                    }
                    else
                    {
                        foreach (var flight in Model.ScheduledFlights)
                        {
                            <tr data-flight-id="@flight.Id">
                                <td>@flight.FlightNumber</td>
                                <td>
                                    <img src="@flight.OriginAirport.Country?.FlagImageUrl" alt="flag" width="30" class="me-2" />
                                    @flight.OriginAirport.FullName
                                </td>
                                <td>
                                    <img src="@flight.DestinationAirport.Country?.FlagImageUrl" alt="flag" width="30" class="me-2" />
                                    @flight.DestinationAirport.FullName
                                </td>
                                <td>@flight.DepartureUtc.ToLocalTime().ToString("HH:mm dd MMM")</td>
                                <td class="status-cell">
                                    <span class="badge dashboard-badge-warning">
                                        <i class="fas fa-clock me-1"></i> Scheduled
                                    </span>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>

    <div class="row mt-5">
        <div class="col-md-6">
            <div class="dashboard-card h-100">
                <h5 class="mb-3">Low Occupancy Flights</h5>
                @if (!Model.LowOccupancyFlights.Any())
                {
                    <div class="text-muted">No low occupancy flights.</div>
                }
                else
                {
                    <ul class="list-unstyled">
                        @foreach (var flight in Model.LowOccupancyFlights)
                        {
                            <li class="d-flex justify-content-between align-items-center mb-2 p-2 rounded bg-light-subtle">
                                <div class="d-flex align-items-center gap-2">
                                    <img src="@flight.OriginCountryFlagUrl" alt="flag" width="25" class="rounded" />
                                    <img src="@flight.DestinationCountryFlagUrl" alt="flag" width="25" class="rounded" />
                                    <div>
                                        <div class="fw-bold">@flight.FlightNumber</div>
                                        <small class="text-muted">@flight.OriginAirportFullName → @flight.DestinationAirportFullName</small><br />
                                        <small>@flight.DepartureFormatted</small>
                                    </div>
                                </div>
                                <span class="badge bg-warning text-dark">@flight.OccupancyRate.ToString("0.0")%</span>
                            </li>
                        }
                    </ul>
                }
            </div>
        </div>

        <div class="col-md-6">
            <div class="dashboard-card h-100">
                <h5 class="mb-3">Recently Created Flights</h5>
                <table class="table table-bordered table-sm">
                    <thead>
                        <tr>
                            <th>Flight</th>
                            <th>Departure</th>
                            <th>From</th>
                            <th>To</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var flight in Model.RecentFlights)
                        {
                            <tr>
                                <td>@flight.FlightNumber</td>
                                <td>@flight.DepartureUtc.ToLocalTime().ToString("dd MMM yyyy HH:mm")</td>
                                <td>
                                    <img src="@flight.OriginAirport.Country?.FlagImageUrl" alt="flag" width="30" class="me-2" />
                                    @flight.OriginAirport.FullName
                                </td>
                                <td>
                                    <img src="@flight.DestinationAirport.Country?.FlagImageUrl" alt="flag" width="30" class="me-2" />
                                    @flight.DestinationAirport.FullName
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>





@section Scripts {

    <script>
        async function setupFlightListeners() {
            try {
                if (!window.flightConnection) {
                    console.warn("SignalR not initialized yet.");
                    return;
                }

                await window.flightConnection.start();
                const connection = window.flightConnection;

                connection.on("FlightStatusChanged", function (flightId, newStatus) {
                    const row = document.querySelector(`[data-flight-id="${flightId}"]`);
                    const statusCell = row?.querySelector(".status-cell");
                    if (!row || !statusCell) return;

                    const badgeHtml = {
                        "Departed": '<span class="badge dashboard-badge-primary"><i class="fas fa-plane-departure me-1"></i> Departed</span>',
                        "Completed": '<span class="badge dashboard-badge-success"><i class="fas fa-plane-arrival me-1"></i> Completed</span>',
                        "Canceled": '<span class="badge dashboard-badge-danger"><i class="fas fa-times-circle me-1"></i> Canceled</span>'
                    };

                    if (badgeHtml[newStatus]) {
                        statusCell.innerHTML = badgeHtml[newStatus];
                    }

                    if (newStatus !== "Scheduled") {
                        row.classList.add("fade-out");
                        setTimeout(() => row.remove(), 1000);
                    }
                });

                connection.on("NewFlightScheduled", function (flight) {
                    const tbody = document.querySelector("#flightTable tbody");
                    const newRow = document.createElement("tr");
                    newRow.setAttribute("data-flight-id", flight.id);
                    newRow.innerHTML = `
                        <td>${flight.flightNumber}</td>
                        <td><img src="${flight.originCountryFlagUrl}" width="30" class="me-2" />${flight.originAirportFullName}</td>
                        <td><img src="${flight.destinationCountryFlagUrl}" width="30" class="me-2" />${flight.destinationAirportFullName}</td>
                        <td>${flight.departureFormatted}</td>
                        <td class="status-cell"><span class="badge dashboard-badge-warning"><i class="fas fa-clock me-1"></i> Scheduled</span></td>`;

                    const departureDate = new Date(flight.departureFormatted);
                    const rows = Array.from(tbody.querySelectorAll("tr"));
                    let inserted = false;

                    for (let i = 0; i < rows.length; i++) {
                        if (rows[i].children.length < 4) continue;
                        const rowDate = new Date(rows[i].children[3].textContent);
                        if (departureDate < rowDate) {
                            tbody.insertBefore(newRow, rows[i]);
                            inserted = true;
                            break;
                        }
                    }

                    if (!inserted) tbody.appendChild(newRow);
                    const emptyRow = tbody.querySelector("td[colspan='5']");
                    if (emptyRow) emptyRow.parentElement.remove();
                });

                connection.on("UpdatedFlight", function (flight) {
                    const tbody = document.querySelector("#flightTable tbody");
                    const existingRow = tbody.querySelector(`[data-flight-id="${flight.id}"]`);
                    if (existingRow) existingRow.remove();

                    const newRow = document.createElement("tr");
                    newRow.setAttribute("data-flight-id", flight.id);
                    newRow.innerHTML = `
                        <td>${flight.flightNumber}</td>
                        <td><img src="${flight.originCountryFlagUrl}" width="30" class="me-2" />${flight.originAirportFullName}</td>
                        <td><img src="${flight.destinationCountryFlagUrl}" width="30" class="me-2" />${flight.destinationAirportFullName}</td>
                        <td>${flight.departureFormatted}</td>
                        <td class="status-cell"><span class="badge dashboard-badge-warning"><i class="fas fa-clock me-1"></i> Scheduled</span></td>`;

                    const departureDate = new Date(flight.departureFormatted);
                    const rows = Array.from(tbody.querySelectorAll("tr"));
                    let inserted = false;

                    for (let i = 0; i < rows.length; i++) {
                        if (rows[i].children.length < 4) continue;
                        const rowDate = new Date(rows[i].children[3].textContent);
                        if (departureDate < rowDate) {
                            tbody.insertBefore(newRow, rows[i]);
                            inserted = true;
                            break;
                        }
                    }

                    if (!inserted) tbody.appendChild(newRow);
                    const emptyRow = tbody.querySelector("td[colspan='5']");
                    if (emptyRow) emptyRow.parentElement.remove();

                    newRow.classList.add("highlighted");
                    setTimeout(() => newRow.classList.remove("highlighted"), 1000);
                });

                console.log("Flight dashboard listeners active.");
            } catch (err) {
                console.error("Error setting up SignalR listeners:", err);
            }
        }

        setupFlightListeners();
    </script>
}
