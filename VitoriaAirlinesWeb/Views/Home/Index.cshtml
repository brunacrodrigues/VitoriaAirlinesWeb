@model VitoriaAirlinesWeb.Models.ViewModels.FlightSearch.SearchFlightViewModel
@using Syncfusion.EJ2.DropDowns
@using VitoriaAirlinesWeb.Data.Enums
@using VitoriaAirlinesWeb.Helpers
@{
    ViewData["Title"] = "Home Page";

    var airportItemTemplate = "<div><span class='flag-icon flag-icon-${Icon} me-2'></span><span>${Text}</span></div>";
    var airportValueTemplate = "<div><span class='flag-icon flag-icon-${Icon} me-2'></span><span>${Text}</span></div>";

    if (TempData["Error"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["Error"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
}

<!-- Hero Section + Form -->
<div class="hero-section" style="background: url('/images/hero-airplane.jpg') center/cover no-repeat;">
    <div class="overlay"></div>
    <div class="container d-flex flex-column justify-content-center align-items-center h-100">
        <h1 class="display-4 fw-bold">Fly with Comfort, Fly with Vitoria Airlines</h1>
        <p class="lead">Book your next journey with elegance and confidence</p>

        @if (!User.IsInRole(UserRoles.Admin))
        {
            <form asp-action="Index" method="get"
                  class="search-form-container p-4 rounded shadow mt-4 mb-5 w-100"
                  style="max-width: 1000px; margin: 0 auto;">

                <div class="trip-type-tabs mb-3">
                    <button type="button" class="btn trip-type-btn @(Model.TripType == TripType.RoundTrip ? "active" : "")" data-trip-type="@((int)TripType.RoundTrip)">Round Trip</button>
                    <button type="button" class="btn trip-type-btn @(Model.TripType == TripType.OneWay ? "active" : "")" data-trip-type="@((int)TripType.OneWay)">One-way</button>
                    <input type="hidden" id="TripType" name="TripType" value="@((int)Model.TripType)" />
                </div>

                <div class="row g-3 align-items-end">
                    <div class="col-md-3">
                        <label asp-for="OriginAirportId" class="form-label text-light">
                            Origin @if (Model.TripType == TripType.RoundTrip) {
                            <span class="text-warning">(required)</span>
                        }
                    </label>
                    <ejs-dropdownlist id="OriginAirportId"
                                      name="OriginAirportId"
                                      dataSource="@Model.Airports"
                                      placeholder="Select origin..."
                                      popupHeight="250px"
                                      itemTemplate="@airportItemTemplate"
                                      valueTemplate="@airportValueTemplate"
                                      CssClass="custom-ddl-height"
                                      value="@(Model.OriginAirportId?.ToString())">
                        <e-dropdownlist-fields text="Text" value="Value" iconCss="Icon"></e-dropdownlist-fields>
                    </ejs-dropdownlist>
                </div>

                <div class="col-md-3">
                    <label asp-for="DestinationAirportId" class="form-label text-light">
                        Destination @if (Model.TripType == TripType.RoundTrip) {
                        <span class="text-warning">(required)</span>
                                                }
                    </label>
                    <ejs-dropdownlist id="DestinationAirportId"
                                      name="DestinationAirportId"
                                      dataSource="@Model.Airports"
                                      placeholder="Select destination..."
                                      popupHeight="250px"
                                      itemTemplate="@airportItemTemplate"
                                      valueTemplate="@airportValueTemplate"
                                      CssClass="custom-ddl-height"
                                      value="@(Model.DestinationAirportId?.ToString())">
                        <e-dropdownlist-fields text="Text" value="Value" iconCss="Icon"></e-dropdownlist-fields>
                    </ejs-dropdownlist>
                </div>

                <div class="col-md-3">
                    <label asp-for="DepartureDate" class="form-label text-light">
                        Departure Date <span class="text-muted">(optional)</span>
                    </label>
                    <input asp-for="DepartureDate" class="form-control custom-input" type="date" />
                </div>

                <div class="col-md-3" id="returnDateContainer" style="@(Model.TripType == TripType.RoundTrip ? "" : "display: none;")">
                    <label asp-for="ReturnDate" class="form-label text-light">
                        Return Date <span class="text-muted">(optional)</span>
                    </label>
                    <input asp-for="ReturnDate" class="form-control custom-input" type="date" />
                </div>
            </div>
            <br />
            <br />

            <div class="row mt-4">
                <div class="col-md-6 mx-auto">
                    <button type="submit" class="btn btn-gold btn-lg fw-bold w-100">
                        <i class="fas fa-search"></i> Search Flights
                    </button>
                </div>
            </div>
        </form>



                }
    </div>
</div>

<!-- ... (mantém o topo do ficheiro como antes) -->
<!-- One-Way Flights -->
@if (Model.OneWayFlights != null && Model.OneWayFlights.Any())
{
    <section class="py-5 flight-results-section" id="availableFlightsSection">
        <div class="container">
            <h2>Departure Flights</h2>
            <div class="row">
                @foreach (var flight in Model.OneWayFlights)
                {
                    <div class="col-md-6 col-lg-4 mb-4">
                        <div class="card h-100 shadow-sm flight-card">
                            <div class="card-header fw-bold text-light">
                                @flight.FlightNumber
                            </div>

                            <div class="card-body text-light">
                                <p class="card-text mb-2">
                                    <strong>From:</strong>
                                    <img src="@flight.OriginAirport.Country.FlagImageUrl" alt="@flight.OriginAirport.Country.CountryCode" width="20" class="me-1" />
                                    @flight.OriginAirport.Name
                                </p>
                                <p class="card-text mb-2">
                                    <strong>To:</strong>
                                    <img src="@flight.DestinationAirport.Country.FlagImageUrl" alt="@flight.DestinationAirport.Country.CountryCode" width="20" class="me-1" />
                                    @flight.DestinationAirport.Name
                                </p>
                                <p class="card-text mb-2">
                                    <i class="far fa-calendar-alt me-1"></i>
                                    <strong>Date:</strong> @flight.DepartureUtc.ToLocalTime().ToString("dd MMM yyyy")
                                </p>
                                <p class="card-text mb-2">
                                    <i class="far fa-clock me-1"></i>
                                    <strong>Time:</strong> @flight.DepartureUtc.ToLocalTime().ToString("HH:mm") → @flight.ArrivalUtc.ToLocalTime().ToString("HH:mm")
                                </p>

                                @if (User.IsInRole(UserRoles.Admin) || User.IsInRole(UserRoles.Employee))
                                {
                                    <p class="card-text mb-2">
                                        <i class="fas fa-plane me-1"></i>
                                        <strong>Airplane:</strong> @flight.Airplane.Model
                                    </p>
                                }

                                <p class="card-text">
                                    <strong>Status:</strong>
                                    <span class="badge bg-primary ms-1">
                                        <i class="fas fa-plane-departure me-1"></i> Scheduled
                                    </span>
                                </p>
                            </div>

                            <div class="card-footer d-flex justify-content-between align-items-center">
                                <div class="flight-price">
                                    <span class="price-label text-light">From</span>
                                    <span class="fw-bold fs-5 text-light">@flight.EconomyClassPrice.ToString("C2")</span>
                                </div>
                                <div class="d-flex">
                                    @if (User.IsInRole(UserRoles.Employee))
                                    {
                                        <a asp-controller="Flights" asp-action="Details" asp-route-id="@flight.Id" class="btn btn-outline-light btn-sm" title="View operational details">Details</a>
                                    }
                                    @if (!User.IsInRole(UserRoles.Admin) && !User.IsInRole(UserRoles.Employee))
                                    {
                                        if (Model.BookedFlightIds != null && Model.BookedFlightIds.Contains(flight.Id))
                                        {
                                            <button class="btn btn-secondary fw-bold" disabled>
                                                <i class="fas fa-check-circle me-1"></i> Already Booked
                                            </button>
                                        }
                                        else
                                        {
                                            @if (Model.TripType == TripType.RoundTrip)
                                            {
                                                <button type="button" class="btn btn-brand-primary fw-bold select-flight-btn"
                                                        data-flight-id="@flight.Id"
                                                        data-direction="outbound"
                                                        data-departure="@flight.DepartureUtc.ToString("o")">
                                                    <i class="fas fa-check me-1"></i> Select
                                                </button>
                                            }
                                            else
                                            {
                                                <a asp-controller="Booking" asp-action="SelectSeat" asp-route-flightId="@flight.Id" class="btn btn-brand-primary fw-bold">
                                                    <i class="fas fa-ticket-alt me-1"></i> Book Now
                                                </a>
                                            }
                                        }
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </section>
}

<!-- Return Flights -->
@if (Model.TripType == TripType.RoundTrip && Model.ReturnFlights != null && Model.ReturnFlights.Any())
{
    <section class="py-5 flight-results-section" id="availableFlightsSectionReturn">
        <div class="container">
            <h2>Return Flights</h2>
            <div class="row">
                @foreach (var flight in Model.ReturnFlights)
                {
                    <div class="col-md-6 col-lg-4 mb-4">
                        <div class="card h-100 shadow-sm flight-card">
                            <div class="card-header fw-bold text-light">
                                @flight.FlightNumber
                            </div>

                            <div class="card-body text-light">
                                <p class="card-text mb-2">
                                    <strong>From:</strong>
                                    <img src="@flight.OriginAirport.Country.FlagImageUrl" alt="@flight.OriginAirport.Country.CountryCode" width="20" class="me-1" />
                                    @flight.OriginAirport.Name
                                </p>
                                <p class="card-text mb-2">
                                    <strong>To:</strong>
                                    <img src="@flight.DestinationAirport.Country.FlagImageUrl" alt="@flight.DestinationAirport.Country.CountryCode" width="20" class="me-1" />
                                    @flight.DestinationAirport.Name
                                </p>
                                <p class="card-text mb-2">
                                    <i class="far fa-calendar-alt me-1"></i>
                                    <strong>Date:</strong> @flight.DepartureUtc.ToLocalTime().ToString("dd MMM yyyy")
                                </p>
                                <p class="card-text mb-2">
                                    <i class="far fa-clock me-1"></i>
                                    <strong>Time:</strong> @flight.DepartureUtc.ToLocalTime().ToString("HH:mm") → @flight.ArrivalUtc.ToLocalTime().ToString("HH:mm")
                                </p>

                                @if (User.IsInRole(UserRoles.Admin) || User.IsInRole(UserRoles.Employee))
                                {
                                    <p class="card-text mb-2">
                                        <i class="fas fa-plane me-1"></i>
                                        <strong>Airplane:</strong> @flight.Airplane.Model
                                    </p>
                                }

                                <p class="card-text">
                                    <strong>Status:</strong>
                                    <span class="badge bg-primary ms-1">
                                        <i class="fas fa-plane-departure me-1"></i> Scheduled
                                    </span>
                                </p>
                            </div>

                            <div class="card-footer d-flex justify-content-between align-items-center">
                                <div class="flight-price">
                                    <span class="price-label text-light">From</span>
                                    <span class="fw-bold fs-5 text-light">@flight.EconomyClassPrice.ToString("C2")</span>
                                </div>
                                <div class="d-flex">
                                    @if (User.IsInRole(UserRoles.Employee))
                                    {
                                        <a asp-controller="Flights" asp-action="Details" asp-route-id="@flight.Id" class="btn btn-outline-light btn-sm" title="View operational details">Details</a>
                                    }
                                    @if (!User.IsInRole(UserRoles.Admin) && !User.IsInRole(UserRoles.Employee))
                                    {
                                        if (Model.BookedFlightIds != null && Model.BookedFlightIds.Contains(flight.Id))
                                        {
                                            <button class="btn btn-secondary fw-bold" disabled>
                                                <i class="fas fa-check-circle me-1"></i> Already Booked
                                            </button>
                                        }
                                        else
                                        {
                                            @* Para voos de volta, SEMPRE queremos um botão de seleção para o round trip. *@
                                            <button type="button" class="btn btn-brand-primary fw-bold select-flight-btn"
                                                    data-flight-id="@flight.Id"
                                                    data-direction="return"
                                                    data-departure="@flight.DepartureUtc.ToString("o")">
                                                <i class="fas fa-check me-1"></i> Select
                                            </button>
                                        }
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>

            <div class="text-center mt-4 mb-5">
                <a id="continueToBookingBtn" class="btn btn-gold btn-lg fw-bold d-none">
                    <i class="fas fa-arrow-right me-1"></i> Continue to Booking
                </a>
            </div>

        </div>
    </section>
}


<!-- No Flights -->
@if ((Model.OneWayFlights != null || Model.ReturnFlights != null) &&
     (!Model.OneWayFlights.Any() && !Model.ReturnFlights.Any()))
{
    <section class="py-5 flight-results-section" id="noFlightsFoundSection">
        <div class="container">
            <div class="alert alert-info mt-4">
                @if (User.IsInRole("Admin"))
                {
                    <p>There are currently no scheduled flights available in the system.</p>
                }
                else
                {
                    <p>No flights found for your search criteria. Please try different dates or destinations.</p>
                }
            </div>
        </div>
    </section>
}

<section class="py-5 bg-light-dark text-light">
    <div class="container">
        <h2>Why Choose Vitoria Airlines?</h2>
        <div class="row text-center justify-content-center">
            <div class="col-md-4 mb-4">
                <div class="feature-card p-4 rounded shadow h-100">
                    <i class="fas fa-plane-departure feature-icon mb-3"></i>
                    <h5 class="feature-title">Global Network</h5>
                    <p class="feature-text">Connecting you to the world with extensive routes and seamless transfers.</p>
                </div>
            </div>
            <div class="col-md-4 mb-4">
                <div class="feature-card p-4 rounded shadow h-100">
                    <i class="fas fa-couch feature-icon mb-3"></i>
                    <h5 class="feature-title">Unrivaled Comfort</h5>
                    <p class="feature-text">Experience spacious seating, gourmet meals, and in-flight entertainment.</p>
                </div>
            </div>
            <div class="col-md-4 mb-4">
                <div class="feature-card p-4 rounded shadow h-100">
                    <i class="fas fa-award feature-icon mb-3"></i>
                    <h5 class="feature-title">Loyalty Rewards</h5>
                    <p class="feature-text">Earn and redeem miles with our rewarding loyalty program and exclusive benefits.</p>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Latest Deals Section (Example) -->
<section class="py-5 bg-dark text-light">
    <div class="container">
        <h2>Discover Our Latest Deals</h2>
        <div class="row justify-content-center">
            <div class="col-md-6 col-lg-4 mb-4">
                <div class="card h-100 deal-card shadow">
                    <img src="/images/destinations/newyork.jpg" class="card-img-top" alt="Deal to Paris">
                    <div class="card-body">
                        <h5 class="card-title">Flights to Paris from $499</h5>
                        <p class="card-text">Explore the City of Lights with our special limited-time offer.</p>
                        <a href="#" class="btn btn-gold w-100 mt-2">Book Now</a>
                    </div>
                </div>
            </div>
            <div class="col-md-6 col-lg-4 mb-4">
                <div class="card h-100 deal-card shadow">
                    <img src="/images/deals/rio.jpg" class="card-img-top" alt="Deal to Rio de Janeiro">
                    <div class="card-body">
                        <h5 class="card-title">Rio de Janeiro Getaway from $699</h5>
                        <p class="card-text">Sun, samba, and stunning beaches await you in Brazil.</p>
                        <a href="#" class="btn btn-gold w-100 mt-2">Book Now</a>
                    </div>
                </div>
            </div>
            <div class="col-md-6 col-lg-4 mb-4">
                <div class="card h-100 deal-card shadow">
                    <img src="/images/deals/dubai.jpg" class="card-img-top" alt="Deal to Dubai">
                    <div class="card-body">
                        <h5 class="card-title">Experience Dubai from $799</h5>
                        <p class="card-text">Luxury and adventure in the dazzling desert metropolis.</p>
                        <a href="#" class="btn btn-gold w-100 mt-2">Book Now</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/flag-icon-css/3.5.0/css/flag-icon.min.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" />

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const tripTypeButtons = document.querySelectorAll('.trip-type-btn');
            const tripTypeInput = document.getElementById('TripType');
            const returnDateContainer = document.getElementById('returnDateContainer');

            tripTypeButtons.forEach(button => {
                button.addEventListener('click', function () {
                    tripTypeButtons.forEach(b => b.classList.remove('active'));
                    this.classList.add('active');
                    tripTypeInput.value = this.dataset.tripType;
                    toggleReturnDate(this.dataset.tripType);
                });
            });

            function toggleReturnDate(tripType) {
                if (parseInt(tripType) === @((int)TripType.RoundTrip)) { // Use a Razor expression for TripType.RoundTrip enum value
                    returnDateContainer.style.display = 'block';
                } else {
                    returnDateContainer.style.display = 'none';
                }
            }

            // Inicializa no load
            toggleReturnDate(tripTypeInput.value);

            // --- LÓGICA DE SELEÇÃO DE VOOS DE IDA E VOLTA ---
            let selectedOutbound = null;
            let selectedReturn = null;
            let selectedOutboundDate = null; // Para guardar a data do voo de ida selecionado

            const selectButtons = document.querySelectorAll('.select-flight-btn');
            const continueBtn = document.getElementById('continueToBookingBtn');

            // Função para atualizar a visibilidade do botão "Continuar"
            function updateContinueButtonVisibility() {
                if (selectedOutbound && selectedReturn) {
                    continueBtn.classList.remove('d-none');
                    // O href é apenas um placeholder, a navegação é controlada pelo eventListener
                    continueBtn.href = `#`;
                } else {
                    continueBtn.classList.add('d-none');
                    continueBtn.href = "#";
                }
                console.log(`[updateContinueButtonVisibility] Outbound: ${selectedOutbound}, Return: ${selectedReturn}. Botão "Continuar": ${!continueBtn.classList.contains('d-none') ? 'Visível' : 'Escondido'}`);
            }

            // Adicione um ouvinte de clique ao botão "Continuar para Reserva"
            // Isso garante que o ReturnFlightId é enviado para a sessão antes de navegar
            continueBtn.addEventListener('click', async function(e) {
                e.preventDefault(); // Previne a navegação padrão do <a>

                if (!selectedOutbound || !selectedReturn) {
                    alert("Por favor, selecione tanto o voo de ida quanto o voo de volta antes de continuar.");
                    return;
                }

                // Desativa o botão para evitar cliques duplos e dá feedback visual
                this.disabled = true;
                this.textContent = 'A processar...';

                try {
                    // Aponta para o HomeController e não espera JSON no retorno
                    const response = await fetch(`/Home/SetReturnFlightId?returnFlightId=${selectedReturn}`, { method: 'POST' });

                    if (response.ok) { // Verifica se o status HTTP é 200 OK
                        console.log("ReturnFlightId armazenado na sessão. Status OK.");
                        // Redireciona para SelectSeat para o voo de ida
                        window.location.href = `/Booking/SelectSeat?flightId=${selectedOutbound}`;
                    } else {
                        // Se não for OK (ex: 400 Bad Request, 500 Internal Server Error)
                        alert("Ocorreu um erro ao preparar a sua reserva de volta no servidor. Por favor, tente novamente.");
                        console.error("Falha ao armazenar ReturnFlightId na sessão. Status:", response.status);
                    }
                } catch (error) {
                    console.error("Erro ao enviar ReturnFlightId para a sessão:", error);
                    alert("Ocorreu um erro de rede ao preparar a sua reserva. Por favor, tente novamente.");
                } finally {
                    // Reativa o botão em caso de erro
                    this.disabled = false;
                    this.innerHTML = '<i class="fas fa-arrow-right me-1"></i> Continue to Booking'; // Restaura o ícone e texto
                }
            });


            selectButtons.forEach(button => {
                button.addEventListener('click', function () {
                    const flightId = parseInt(this.dataset.flightId);
                    const direction = this.dataset.direction;
                    const departureIso = this.dataset.departure;
                    const departureDate = new Date(departureIso);

                    console.log(`[Clique] Botão clicado: Direção=${direction}, FlightId=${flightId}`);
                    console.log(`[Antes] selectedOutbound=${selectedOutbound}, selectedReturn=${selectedReturn}, selectedOutboundDate=${selectedOutboundDate ? selectedOutboundDate.toISOString() : 'null'}`);


                    if (direction === 'outbound') {
                        // Se o voo de ida já estiver selecionado e for o mesmo, desseleciona
                        if (selectedOutbound === flightId) {
                            selectedOutbound = null;
                            selectedOutboundDate = null;
                            this.classList.remove('btn-gold');
                            console.log(`[Ida] Voo desselecionado: ${flightId}`);
                        } else {
                            // Desseleciona visualmente qualquer outro voo de ida que possa estar "gold"
                            document.querySelectorAll('.select-flight-btn[data-direction="outbound"]')
                                .forEach(btn => btn.classList.remove('btn-gold'));

                            // Seleciona o novo voo de ida
                            selectedOutbound = flightId;
                            selectedOutboundDate = departureDate;
                            this.classList.add('btn-gold');
                            console.log(`[Ida] Voo selecionado: ${flightId}. Nova data de partida: ${selectedOutboundDate.toISOString()}`);

                            // Se já houver um voo de volta selecionado, verifica se ainda é válido
                            if (selectedReturn) {
                                const returnBtn = document.querySelector(`.select-flight-btn[data-direction="return"][data-flight-id="${selectedReturn}"]`);
                                if (returnBtn) { // Certifica-se que o botão do voo de volta ainda existe
                                    const currentReturnDate = new Date(returnBtn.dataset.departure);
                                    if (currentReturnDate <= selectedOutboundDate) {
                                        // Se a data do voo de volta não for mais válida, desseleciona-o
                                        returnBtn.classList.remove('btn-gold');
                                        selectedReturn = null;
                                        alert("O voo de volta selecionado foi automaticamente desselecionado porque a data é anterior ou igual à do novo voo de ida. Por favor, selecione um novo voo de volta.");
                                        console.log(`[Ida] Voo de volta desselecionado devido à data inválida: ${flightId}`);
                                    }
                                } else {
                                    // Se o botão do voo de volta não for encontrado, significa que ele não está mais na página (possivelmente devido a uma nova busca), então desseleciona a variável.
                                    selectedReturn = null;
                                    console.log("[Ida] Botão do voo de volta selecionado não encontrado, redefinindo selectedReturn.");
                                }
                            }
                        }
                    }

                    if (direction === 'return') {
                        // Impede a seleção de voo de volta se nenhum voo de ida estiver selecionado
                        if (!selectedOutboundDate) {
                            alert("Por favor, selecione um voo de ida primeiro.");
                            console.log("[Volta] Nenhum voo de ida selecionado. Abortando seleção de volta.");
                            return;
                        }

                        // Impede a seleção de voo de volta se a data for anterior ou igual à de ida
                        if (departureDate <= selectedOutboundDate) {
                            alert("O voo de volta deve ser em uma data posterior ao voo de ida.");
                            // Desselecionar visualmente se por acaso estava "gold" e é inválido
                            this.classList.remove('btn-gold');
                            if (selectedReturn === flightId) { // Se estava selecionado, garante que a variável também seja resetada
                                selectedReturn = null;
                            }
                        }

                        // Se o voo de volta já estiver selecionado e for o mesmo, desseleciona
                        if (selectedReturn === flightId) {
                            selectedReturn = null;
                            this.classList.remove('btn-gold');
                            console.log(`[Volta] Voo desselecionado: ${flightId}`);
                        } else {
                            // Desseleciona visualmente qualquer outro voo de volta que possa estar "gold"
                            document.querySelectorAll('.select-flight-btn[data-direction="return"]')
                                .forEach(btn => btn.classList.remove('btn-gold'));

                            // Seleciona o novo voo de volta
                            selectedReturn = flightId;
                            this.classList.add('btn-gold');
                            console.log(`[Volta] Voo selecionado: ${flightId}`);
                        }
                    }

                    console.log(`[Depois] selectedOutbound=${selectedOutbound}, selectedReturn=${selectedReturn}`);
                    updateContinueButtonVisibility(); // Atualiza apenas a visibilidade
                });
            });
        });
    </script>

}